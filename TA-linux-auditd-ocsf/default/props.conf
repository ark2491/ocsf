[linux:audit:ocsf]
# types here https://access.redhat.com/articles/4409591
# global fields to check off immediately
REPORT-auditdarguments = auditdarguments
REPORT-message = nixmessages
REPORT-auditdproctitle = auditdproctitle
# some of these fieldaliases cover too much, so will need to update with evals later, putting this here because alias covers entire sourcetype
FIELDALIAS-event_code = type as metadata.event_code
FIELDALIAS-actoruser = auid as actor.user
FIELDALIAS-actorprocess = exe as actor.process
FIELDALIAS-actorses = ses as actor.session
# starting combining of evals
# these two are important as they will match fields to the lookups
EVAL-activity_id=case(syscall == "openat" AND nametype == "CREATE" AND like(arguments, "O_WRONLY|O_CREAT|O_NOCTTY%"), "1", syscall == "openat" AND nametype == "NORMAL" AND like(arguments, "O_RDONLY"), "2", syscall == "openat" AND nametype == "NORMAL" AND like(arguments, "O_RDONLY|O_CLOEXEC"), "2", syscall == "ftruncate", "3", syscall == "openat" AND nametype == "CREATE" AND like(arguments, "O_WRONLY|O_CREAT%"), "3", syscall == "unlinkat" AND nametype == "DELETE", "4", syscall == "openat" AND nametype == "NORMAL" AND arguments == "O_RDONLY|O_CLOEXEC" AND comm="mv", "5", syscall == "openat" AND nametype == "CREATE" AND comm="gpg", "10", syscall == "openat" AND nametype == "NORMAL" AND comm="mount", "12", syscall == "openat" AND nametype == "NORMAL" AND comm="umount", "13", type == "USER_AVC", "1", type == "AVC", "1", type == "ADD_GROUP", "1", type == "ADD_USER", "1", type == "DEL_USER", "6", type == "CHGRP_ID", "7", type == "USER_CHAUTHTOK", "7", type == "LOGIN", "1", type == "CRYPTO_LOGIN", "1", type == "USER_ACCT", "1", type == "USER_LOGOUT", "2", type == "USER_END", "2", type == "USER_START", "1")
EVAL-class_uid=case(syscall == "openat" AND nametype == "CREATE" AND like(arguments, "O_WRONLY|O_CREAT|O_NOCTTY%"), "1001", syscall == "openat" AND nametype == "NORMAL" AND like(arguments, "O_RDONLY"), "1001", syscall == "openat" AND nametype == "NORMAL" AND like(arguments, "O_RDONLY|O_CLOEXEC"), "1001", syscall == "ftruncate", "1001", syscall == "openat" AND nametype == "CREATE" AND like(arguments, "O_WRONLY|O_CREAT%"), "1001", syscall == "unlinkat" AND nametype == "DELETE", "1001", syscall == "openat" AND nametype == "NORMAL" AND arguments == "O_RDONLY|O_CLOEXEC" AND comm="mv", "1001", syscall == "openat" AND nametype == "CREATE" AND comm="gpg", "1001", syscall == "openat" AND nametype == "NORMAL" AND comm="mount", "1001", syscall == "openat" AND nametype == "NORMAL" AND comm="umount", "1001", type == "USER_AVC", "2001", type == "AVC", "2001", type == "ADD_GROUP", "3001", type == "ADD_USER", "3001", type == "DEL_USER", "3001", type == "CHGRP_ID", "3001", type == "USER_CHAUTHTOK", "3001", type == "LOGIN", "3002", type == "CRYPTO_LOGIN", "3002", type == "USER_ACCT", "3002", type == "USER_LOGOUT", "3002", type == "USER_END", "3002", type == "USER_START", "3002", type == "USER_AUTH", "3003", type == "GRP_AUTH", "3003")
# matching lookups to above
EVAL-activity_name=case(class_uid == "1001", json_extract_exact(lookup("nix_class_uid_activity_id_details", json_object("class_uid", class_uid, "activity_id", activity_id), json_array("activity_name")), "activity_name"))
EVAL-activity_description=case(class_uid == "1001", json_extract_exact(lookup("nix_class_uid_activity_id_details", json_object("class_uid", class_uid, "activity_id", activity_id), json_array("activity_description")), "activity_description"))
EVAL-category_name=case(class_uid == "1001", json_extract_exact(lookup("nix_class_uid_activity_id_details", json_object("class_uid", class_uid, "activity_id", activity_id), json_array("category_name")),"category_name"))
EVAL-class_name=case(class_uid == "1001", json_extract_exact(lookup("nix_class_uid_activity_id_details", json_object("class_uid", class_uid, "activity_id", activity_id), json_array("class_name")), "class_name"))

EVAL-category_uid=case(syscall == "openat" AND nametype == "CREATE" AND like(arguments, "O_WRONLY|O_CREAT|O_NOCTTY%"), "1", syscall == "openat" AND nametype == "NORMAL" AND like(arguments, "O_RDONLY"), "1", syscall == "openat" AND nametype == "NORMAL" AND like(arguments, "O_RDONLY|O_CLOEXEC"), "1", syscall == "ftruncate", "1", syscall == "openat" AND nametype == "CREATE" AND like(arguments, "O_WRONLY|O_CREAT%"), "1", syscall == "unlinkat" AND nametype == "DELETE", "1", syscall == "openat" AND nametype == "NORMAL" AND arguments == "O_RDONLY|O_CLOEXEC" AND comm="mv", "1", syscall == "openat" AND nametype == "CREATE" AND comm="gpg", "1", syscall == "openat" AND nametype == "NORMAL" AND comm="mount", "1", syscall == "openat" AND nametype == "NORMAL" AND comm="umount", "1", type == "USER_AVC", "2", type == "AVC", "2", type == "ADD_GROUP", "3", type == "ADD_USER", "3", type == "DEL_USER", "3", type == "CHGRP_ID", "3", type == "USER_CHAUTHTOK", "3", type == "LOGIN", "3", type == "CRYPTO_LOGIN", "3", type == "USER_ACCT", "3", type == "USER_LOGOUT", "3", type == "USER_END", "3", type == "USER_START", "3", type == "USER_AUTH", "3", type == "GRP_AUTH", "3")
EVAL-status_detail=case(type == "USER_AVC", message, type == "AVC", message, type == "USER_AUTH", message, type == "GRP_AUTH", message)
EVAL-severity=case(type == "ADD_GROUP", "2", type == "ADD_USER", "2", type == "DEL_USER", "2", type == "CHGRP_ID", "2", type == "USER_CHAUTHTOK", "2", type == "LOGIN", "Informational", type == "CRYPTO_LOGIN", "Informational", type == "USER_ACCT", "Informational", type == "USER_LOGOUT", "Informational", type == "USER_END", "Informational", type == "USER_START", "Informational", type == "USER_AUTH", "Informational", type == "GRP_AUTH", "Informational")

#default settings shared between all events in OCSF
EVAL-metadata.name = "auditd"
EVAL-metadata.log_provider = "auditd"
EVAL-metadata.log_version = "auditd"
EVAL-time=strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q")
EVAL-metadata.logged_time=strftime(_indextime, "%Y-%m-%dT%H:%M:%S.%Q")
EVAL-metadata.original_time=strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q")
EVAL-metadata.product = "auditd"
EVAL-metadata.version = "1.0.0"
EVAL-type_uid=(class_uid*100+activity_id)
#lookups
LOOKUP-type_name = nix_account_change_type_name type_uid OUTPUT type_name type_uid_description
LOOKUP-auth_proto_id = nix_authentication_id_to_protocol auth_protocol OUTPUT auth_protocol_id
LOOKUP-logontypeid = nix_authentication_logon_type_id_to_type logon_type OUTPUT logon_type_description logon_type_id
LOOKUP-severityid = nix_authentication_severity_id severity OUTPUT severity_id severity_description
LOOKUP-nix_security_risk_level = nix_security_risk_level risk_level_id OUTPUT risk_level
LOOKUP-severity = nix_account_change_severity_id severity_id OUTPUT severity
LOOKUP-status_id = nix_account_change_status_id status OUTPUT status_id
LOOKUP-analytic_type_id = nix_security_finding_analytic_type_id analytic.type_id OUTPUT analytic.type,analytic.type_description
LOOKUP-nix_security_impact = nix_security_impact impact_id OUTPUT impact impact_score


################
# Class specific fields and notes
################

# File System Activity [1001] Class
EVAL-component=case(class_uid == "1001", cwd + "/" + replace(full_proctitle, "(.+?)(\S+)\s$", "\2"))
EVAL-device=case(class_uid == "1001", host)
EVAL-file=case(class_uid == "1001", replace(full_proctitle, "(.+?)(\S+)\s$", "\2"))
EVAL-file_result.name=case(class_uid == "1001", file)
EVAL-file_result.owner=case(class_uid == "1001", ouid)
EVAL-file_result.signature=case(class_uid == "1001", inode)
EVAL-file_result.path=case(class_uid == "1001", cwd + "/" + replace(full_proctitle, "(.+?)(\S+)\s$", "\2"))
EVAL-file_result.type_id=case(mode == "file", "1", mode == "dir", "4", mode == "character", "1")
EVAL-sevirity_id=case(activity_id <= "5" AND class_uid == "1001", "1", class_uid == "1001" AND activity_id >= "6" AND activity_id >= "7", "1", class_uid == "1001" AND activity_id == "8", "1", class_uid == "1001" AND activity_id >= "9" AND activity_id <= "13", "3", class_uid == "1001" AND activity_id >= "14", "1")

# Security Finding [2001] Class

EVAL-analytic.category=case(type == "USER_AVC", "selinux", type == "AVC", "selinux")
EVAL-analytic.desc=case(type == "USER_AVC", "User space AVC message", type == "AVC", "SELinux AVC denial or grant")
EVAL-analytic.name=case(type == "USER_AVC", "avc", type == "AVC", "avc")
EVAL-analytic.type_id=case(type == "USER_AVC", "1", type == "AVC", "1")
# need to work on attacks array
EVAL-cis_csc.control=case(type == "USER_AVC", "Ensure SELinux policy is configured - config", type == "AVC", "Ensure SELinux policy is configured - config")
EVAL-cis_csc.version=case(type == "USER_AVC", "1.6.1.3", type == "AVC", "1.6.1.3")
# need to add compliance and subcategories
EVAL-confidence_id=case(type == "USER_AVC", "1", type == "AVC", "1")
LOOKUP-nix_security_confidence_id_translate = nix_security_confidence_id_translate confidence_id OUTPUT confidence confidence_description
EVAL-data_sources=case(type == "USER_AVC", "selinux", type == "AVC", "selinux")
EVAL-evidence=case(type == "USER_AVC", message, type == "AVC", message)
EVAL-finding.title = case(type == "USER_AVC", msgtype, type == "AVC", msgtype)
EVAL-finding.uid = case(type == "USER_AVC", pid, type == "AVC", pid)
EVAL-impact_id = case(type == "USER_AVC", "1", type == "AVC", "1")
# need kill_chain
# need malware
# need nist
# need observables
EVAL-process=case(type == "USER_AVC", exe, type == "AVC", exe)
EVAL-resources.labels=case(type == "USER_AVC", subj, type == "AVC", subj)
EVAL-resources.owner = case(type == "USER_AVC", tclass, type == "AVC", tclass)
EVAL-risk_level_id= case(type == "USER_AVC", "1", type == "AVC", "1")
EVAL-severity_id= case(type == "USER_AVC", "2", type == "AVC", "2")


# Account Change [3001] Class
# covers the following audit types: ADD_GROUP, ADD_USER, DEL_USER, DEL_GROUP, CHGRP_ID, USER_CHAUTHTOK
# does not cover these fields yet count: duration, end_time, enrichments, http_request, metadata(some), observables, raw_data, start_time, status_code, timezone_offset, unmapped

EVAL-src_endpoint=case(type == "ADD_GROUP", host, type == "ADD_USER", host, type == "DEL_USER", host, type == "CHGRP_ID", host, host, type == "USER_CHAUTHTOK", host)
EVAL-status=case(res=="failed", "failure", res=="success", "success", res=="yes", "success", success == "yes", "success", success == "no", "failure")
EVAL-user=case(type == "ADD_USER", id)
EVAL-user_result.uid_alt=case(type == "ADD_USER", replace(user, "[a-zA-Z\(\)]", ""))
EVAL-user_result.account=case(type == "ADD_USER", id)
EVAL-user_result.name=case(type == "ADD_USER", id)
EVAL-user_result.id=case(type == "ADD_USER", "0")
EVAL-user_result.uid=case(type == "ADD_USER", replace(user, "[a-zA-Z\(\)]", ""))

# Authentication [3002] Class
# does not cover these fields yet: activity_id: certificate, count, duration, enrichments, http_request, message, metadata, is_mfa, is_new_logon, observables, raw_data, status_detail, timezone_offset, unmapped

EVAL-auth_protocol=case(type == "LOGIN", "pam", type == "CRYPTO_LOGIN", "pam", type == "USER_ACCT", "pam", type == "USER_LOGOUT", "pam", type == "USER_END", "pam", type == "USER_START", "pam")
EVAL-auth_protocol_id=case(type == "LOGIN", "99", type == "CRYPTO_LOGIN", "99", type == "USER_ACCT", "99", type == "USER_LOGOUT", "99", type == "USER_END", "99", type == "USER_START", "99")
EVAL-logon_process=case(type == "LOGIN", exe, type == "CRYPTO_LOGIN", exe, type == "USER_ACCT", exe, type == "USER_LOGOUT", exe, type == "USER_END", exe, type == "USER_START", exe)
EVAL-logon_process.lineage=case(type == "LOGIN", exe, type == "CRYPTO_LOGIN", exe, type == "USER_ACCT", exe, type == "USER_LOGOUT", exe, type == "USER_END", exe, type == "USER_START", exe)
EVAL-logon_process.pid=case(type == "LOGIN", pid, type == "CRYPTO_LOGIN", pid, type == "USER_ACCT", pid, type == "USER_LOGOUT", pid, type == "USER_END", pid, type == "USER_START", pid)
EVAL-logon_process.session=case(type == "LOGIN", ses, type == "CRYPTO_LOGIN", ses, type == "USER_ACCT", ses, type == "USER_LOGOUT", ses, type == "USER_END", ses, type == "USER_START", ses)
EVAL-logon_process.user=case(type == "LOGIN", auid, type == "CRYPTO_LOGIN", auid, type == "USER_ACCT", auid, type == "USER_LOGOUT", auid, type == "USER_END", auid, type == "USER_START", auid)
EVAL-service.name=case(type == "LOGIN", exe, type == "CRYPTO_LOGIN", exe, type == "USER_ACCT", exe, type == "USER_LOGOUT", exe, type == "USER_END", exe, type == "USER_START", exe)
EVAL-session.uid=case(type == "LOGIN", ses, type == "CRYPTO_LOGIN", ses, type == "USER_ACCT", ses, type == "USER_LOGOUT", ses, type == "USER_END", ses, type == "USER_START", ses)EVAL-end_time=case(type == "USER_LOGOUT", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), type == "USER_END", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"))
EVAL-is_cleartext=case(exe == "/usr/bin/sshd", "false", exe == "/usr/bin/sudo", "false", exe == "/usr/bin/sftp", "false", exe == "/usr/bin/ftp", "true", exe == "/usr/bin/telnet", "true")
EVAL-dst_endpoint=case(type == "LOGIN", host, type == "CRYPTO_LOGIN", host, type == "USER_ACCT", host, type == "USER_LOGOUT", host, type == "USER_END", host, type == "USER_START", host)
EVAL-logon_type=case(exe == "/usr/bin/sshd", "Remote Interactive", exe == "/usr/bin/sftp", "Remote Interactive", exe == "/usr/bin/ftp", "Network Cleartext", exe == "/usr/bin/telnet", "Network Cleartext", exe == "/usr/bin/sudo", "Interactive")
EVAL-is_remote=case(exe == "/usr/bin/sshd", "true", exe == "/usr/bin/sudo", "false", exe == "/usr/bin/sftp", "true", exe == "/usr/bin/ftp", "true", exe == "/usr/bin/telnet", "true")
EVAL-session.created_time=case(exe == "/usr/bin/sshd", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), exe == "/usr/bin/sudo", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), exe == "/usr/bin/sftp", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), exe == "/usr/bin/ftp", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), exe == "/usr/bin/telnet", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"))
EVAL-session.is_remote=case(exe == "/usr/bin/sshd", "true", exe == "/usr/bin/sudo", "false", exe == "/usr/bin/sftp", "true", exe == "/usr/bin/ftp", "true", exe == "/usr/bin/telnet", "true")
EVAL-src_endpoint=case(type == "LOGIN", addr, type == "CRYPTO_LOGIN", addr, type == "USER_ACCT", addr, type == "USER_LOGOUT", addr, type == "USER_END", addr, type == "USER_START", addr)
EVAL-start_time=case(type == "LOGIN", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), type == "CRYPTO_LOGIN", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), type == "USER_ACCT", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), type == "USER_START", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"))
EVAL-user=case(type == "LOGIN", auid, type == "CRYPTO_LOGIN", auid, type == "USER_ACCT", auid, type == "USER_LOGOUT", auid, type == "USER_END", auid, type == "USER_START", auid)
EVAL-user.account=case(type == "LOGIN", auid, type == "CRYPTO_LOGIN", auid, type == "USER_ACCT", auid, type == "USER_LOGOUT", auid, type == "USER_END", auid, type == "USER_START", auid)
EVAL-user.name=case(type == "LOGIN", auid, type == "CRYPTO_LOGIN", auid, type == "USER_ACCT", auid, type == "USER_LOGOUT", auid, type == "USER_END", auid, type == "USER_START", auid)

#Authorize Session [3003] Class

EVAL-dst_endpoint=case(type == "USER_AUTH", host, type == "GRP_AUTH", host)
# missing group, can come from ES Identities
# missing privileges, can come from ES Identities
EVAL-src_endpoint=case(type == "USER_AUTH", addr, type == "GRP_AUTH", addr)
EVAL-start_time=case(type == "USER_AUTH", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"), type == "GRP_AUTH", strftime(_time, "%Y-%m-%dT%H:%M:%S.%Q"))
EVAL-user.account=case(type == "USER_AUTH", acct)
EVAL-user.name=case(type == "USER_AUTH", acct, type == "GRP_AUTH", acct)
EVAL-user.account=case(type == "USER_AUTH", acct, type == "GRP_AUTH", acct) 
EVAL-user.account=case(type == "USER_AUTH", acct, type == "GRP_AUTH", acct)
# missing user.type_id, can come from ES Identities
